#!/usr/bin/env python3
'Read gestures from libinput touchpad and action shell commands.'
# Mark Blakeney, Sep 2015
import os, sys, argparse, evdev, subprocess, time, shlex, re, getpass, fcntl, platform, math, select
#from macro import *
from collections import OrderedDict
from pathlib import Path
from distutils.version import LooseVersion as Version

PROG = Path(sys.argv[0]).stem

# Conf file containing gesture commands.
# Search first for user file then system file.
CONFNAME = '{}.conf'.format(PROG)
USERDIR = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
CONFDIRS = (USERDIR, '/etc')

# Ratio of X/Y (or Y/X) at which we consider an oblique swipe gesture.
# The number is the trigger angle in degrees and set to 360/8/2.
OBLIQUE_RATIO = math.tan(math.radians(22.5))

# Rotation threshold in degrees to discriminate pinch rotate from in/out
ROTATE_ANGLE = 15.0

# Set up command line arguments
opt = argparse.ArgumentParser(description=__doc__)
opt.add_argument('-c', '--conffile',
        help='alternative configuration file')
opt.add_argument('-v', '--verbose', action='store_true',
        help='output diagnostic messages')
opt.add_argument('-d', '--debug', action='store_true',
        help='output diagnostic messages only, do not action gestures')
opt.add_argument('-r', '--raw', action='store_true',
        help='output raw libinput debug-event messages only, '
        'do not action gestures')
opt.add_argument('-l', '--list', action='store_true',
        help='just list out environment and configuration')
opt.add_argument('--device',
        help='explicit device name to use (or path if starts with /)')
# Test/diag hidden option to specify a file containing libinput list
# device output to parse
opt.add_argument('--device-list', help=argparse.SUPPRESS)
args = opt.parse_args()

if args.debug or args.raw or args.list:
    args.verbose = True

def open_lock(*args):
    'Create a lock based on given list of arguments'
    # We use exclusive assess to a file for this
    fp = Path('/tmp', '-'.join(args) + '.lock').open('w')
    try:
        fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return None

    return fp

def run(cmd, check=True):
    'Run subprocess function and return standard output or None'
    # Maintain subprocess compatibility with python 3.4 so use
    # check_output() rather than run().
    try:
        stdout = subprocess.check_output(cmd, universal_newlines=True,
                stderr=(None if check else subprocess.DEVNULL))
    except Exception as e:
        stdout = None
        if check:
            print(str(e), file=sys.stderr)

    return stdout

def get_libinput_vers():
    'Return the libinput installed version number string'
    # Try to use newer libinput interface then fall back to old
    # (depreciated) interface.
    res = run(('libinput', '--version'), check=False)
    return res.strip() if res else \
            run(('libinput-list-devices', '--version'), check=False)

# Libinput changed the way in which it's utilities are called
libvers = get_libinput_vers()
if not libvers:
    sys.exit('libinput helper tools do not seem to be installed?')

if Version(libvers) >= Version('1.8'):
    cmd_debug_events = 'libinput debug-events'
    cmd_list_devices = 'libinput list-devices'
else:
    cmd_debug_events = 'libinput-debug-events'
    cmd_list_devices = 'libinput-list-devices'

def get_devices_list():
    'Get list of devices and their attributes (as a dict) from libinput'
    if args.device_list:
        with open(args.device_list) as fd:
            stdout = fd.read()
    else:
        stdout = run(cmd_list_devices.split())

    if stdout:
        dev = {}
        for line in stdout.splitlines():
            line = line.strip()
            if line and ':' in line:
                key, value = line.split(':', maxsplit=1)
                dev[key.strip().lower()] = value.strip()
            elif dev:
                yield dev
                dev = {}

def get_device(name):
    'Determine libinput touchpad device'
    devices = list(get_devices_list())

    if not devices:
        print('Can not see any devices, did you add yourself to the '
                'input group and log out/in?', file=sys.stderr)
        return None

    # If a specific device name was asked for then return that device
    # This is the "Device" name from libinput list-devices command.
    if name:
        kdev = str(Path(name).resolve()) if name[0] == '/' else None
        for d in devices:
            # If the device name starts with a '/' then it is instead
            # considered as the explicit device path although since
            # device paths can change through reboots this is best to be
            # a symlink. E.g. use the corresponding full path link under
            # /dev/input/by-path/*.
            if kdev:
                if d.get('kernel') == kdev:
                    return d
            elif d.get('device') == name:
                return d
        return None

    # Otherwise look for 1st device with touchpad capabilities
    for d in devices:
        if 'size' in d and 'pointer' in d.get('capabilities'):
            return d

    # Otherwise look for 1st device with touchpad in it's name
    for d in devices:
        if re.search(r'touch ?pad', d.get('device', ''), re.I):
            return d

    # Give up
    return None

special_keycodes = [
    evdev.ecodes.KEY_LEFTCTRL, 
    evdev.ecodes.KEY_LEFTMETA, 
    evdev.ecodes.KEY_LEFTSHIFT, 
    evdev.ecodes.KEY_LEFTALT, 
    evdev.ecodes.KEY_LEFT, 
    evdev.ecodes.KEY_RIGHT, 
    evdev.ecodes.KEY_UP, 
    evdev.ecodes.KEY_DOWN
]

character_whitelist = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def send_hotkey(special_keys, letter=''):
    with evdev.UInput() as ui:
        if len(letter) > 1:
            return False

        if letter == '':
            writekey = False 
        elif letter == '+':
            key = 78 #evdev.ecodes.ecodes['KEY_KPPLUS']
            writekey = True
        elif letter == '-':
            key = 74 #evdev.ecodes.ecodes['KEY_KPMINUS')]
            writekey = True
        elif letter.upper() in character_whitelist:
            key = evdev.ecodes.ecodes['KEY_'+letter.upper()]
            writekey = True
        else:
            return False
        
        for i in range(8):
            if (1 << i) & special_keys == (1 << i):
                ui.write(evdev.ecodes.EV_KEY, special_keycodes[i], 1)
        
        if writekey:
            ui.write(evdev.ecodes.EV_KEY, key, 1)
            ui.write(evdev.ecodes.EV_KEY, key, 0)
            print("key written")
        ui.syn()

        # Hack to get upper case characters to work
        time.sleep(0.01)

        for i in range(8):
            if (1 << i) & special_keys == (1 << i):
                ui.write(evdev.ecodes.EV_KEY, special_keycodes[i], 0)
        
        ui.syn()
        return True


class COMMAND:
    'Generic command handler'
    def __init__(self, args):
        self.argslist = args

    def run(self):
        'Run this command + arguments'
        run(self.argslist)

    def __str__(self):
        'Create string representation'
        return ' '.join(self.argslist)

# Table of internal commands
internal_commands = OrderedDict()

def add_internal_command(cls):
    'Add configuration command to command lookup table based on name'
    internal_commands[re.sub('^COMMAND', '', cls.__name__)] = cls

@add_internal_command
class COMMAND_input(COMMAND):
    def __init__(self, args):
        super().__init__(args)
        # Set up command line arguments
        opt = argparse.ArgumentParser(prog=self.argslist[0],
                description=self.__doc__)
        opt.add_argument('--ctrl', action='store_true',
                help='Emulate Ctrl key')
        opt.add_argument('--super', action='store_true',
                help='Emulate Super key')
        opt.add_argument('--shift', action='store_true',
                help='Emulate Shift key')
        opt.add_argument('--alt', action='store_true',
                help='Emulate Alt key')
        opt.add_argument('--left', action='store_true',
                help='Emulate Left key')
        opt.add_argument('--right', action='store_true',
                help='Emulate Right key')
        opt.add_argument('--up', action='store_true',
                help='Emulate Up key')
        opt.add_argument('--down', action='store_true',
                help='Emulate Down key')
        opt.add_argument('text', type=str, nargs='?', default='',
                help='Input character/text')
        self.args = opt.parse_args(self.argslist[1:])

    def run(self):
        sargs = self.args
        special_key = 0b00000000
        if sargs.ctrl:
            special_key = special_key | 1
        if sargs.super:
            special_key = special_key | (1 << 1)
        if sargs.shift:
            special_key = special_key | (1 << 2)
        if sargs.alt:
            special_key = special_key | (1 << 3)
        if sargs.left:
            special_key = special_key | (1 << 4)
        if sargs.right:
            special_key = special_key | (1 << 5)
        if sargs.up:
            special_key = special_key | (1 << 6)
        if sargs.down:
            special_key = special_key | (1 << 7)

        result = send_hotkey(special_key, sargs.text)
        if args.verbose:
            if result:
                print('{}: _input: {}'.format(PROG, vars(sargs)))
            else:
                print('{}: _input ERROR parsing arguments: {}'.format(PROG, vars(sargs)))

@add_internal_command
class COMMAND_internal(COMMAND):
    'Internal command handler.'
    def __init__(self, args):
        'Action internal swipe commands'
        super().__init__(args)

        # Commands currently supported are:
        commands = (
            'ws_up',
            'ws_down',
        )
        # Set up command line arguments
        opt = argparse.ArgumentParser(prog=self.argslist[0],
                description=self.__doc__)
        opt.add_argument('-w', '--wrap', action='store_true',
                help='Wrap workspaces when switching to/from start/end')
        opt.add_argument('--row', type=int,
                help='Step along the row for this number in a row')
        opt.add_argument('--col', type=int,
                help='Step along the column for this number in a column')
        opt.add_argument('action', choices=commands,
                help='Internal command to action')
        self.args = opt.parse_args(self.argslist[1:])
        self.is_up = self.args.action == commands[0]

    def run(self):
        'Get list of current workspaces and select next one'
        stdout = run(('wmctrl', '-d'), check=False)
        if not stdout:
            # This command can fail on GNOME when you have only a single
            # dynamic workspace using Xorg (probably a GNOME bug) so let's
            # just ignore it given there is no other workspace to switch to
            # anyhow.
            return

        args = self.args
        out = stdout.strip().splitlines()
        lines = [l.split(maxsplit=3)[1] for l in out]
        index = lines.index('*')

        if args.row:
            minindex = index - (index % args.row)
            maxindex = minindex + args.row
            count = 1
        else:
            minindex = 0
            maxindex = len(lines)
            count = (maxindex // args.col) if args.col else 1

        # Work out desired workspace
        index += count if self.is_up else -count
        if args.wrap:
            if index == minindex - count:
                index = maxindex - count
            elif index >= maxindex:
                index += minindex - maxindex
            elif index < minindex:
                index += maxindex - minindex

        # Switch to desired workspace
        if index >= minindex and index < maxindex:
            run(('wmctrl', '-s', str(index)))

# Table of gesture handlers
handlers = OrderedDict()

def add_gesture_handler(cls):
    'Create gesture handler instance and add to lookup table based on name'
    handlers[cls.__name__] = cls()

class GESTURE:
    'Abstract base class for handling for gestures'
    def __init__(self):
        'Initialise this gesture at program start'
        self.name = type(self).__name__
        self.motions = OrderedDict()
        self.has_extended = False

    def add(self, motion, fingers, command):
        'Add a configured motion command for this gesture'
        if motion not in self.SUPPORTED_MOTIONS:
            return 'Gesture {} does not support motion "{}".\n' \
                    'Must be "{}"'.format(self.name.lower(), motion,
                            '" or "'.join(self.SUPPORTED_MOTIONS))
        if not command:
            return 'No command configured'

        # If any extended gestures configured then set flag to enable
        # their discrimination
        if self.extended_text in motion:
            self.has_extended = True

        key = (motion, fingers) if fingers else motion

        try:
            cmds = shlex.split(command)
        except Exception as e:
            return str(e)

        cls = internal_commands.get(cmds[0], COMMAND)
        self.motions[key] = cls(cmds)
        return None

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.data = [0.0, 0.0]

    def action(self, motion):
        'Action a motion command for this gesture'
        command = self.motions.get((motion, self.fingers)) or \
                self.motions.get(motion)

        if args.verbose:
            print('{}: {} {} {} {}'.format(PROG, self.name, motion,
                self.fingers, self.data))
            if command:
                print('  ', command)

        if command and not args.debug:
            command.run()

@add_gesture_handler
class SWIPE(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down',
            'left_up', 'right_up', 'left_down', 'right_down')
    extended_text = '_'

    def update(self, coords):
        'Update this gesture for a motion'
        self.data[0] += float(coords[2])
        self.data[1] += float(coords[3])

    def end(self):
        'Action this gesture at the end of a motion sequence'
        x, y = self.data
        abx = abs(x)
        aby = abs(y)

        # Discriminate left/right or up/down.
        # If significant movement in both planes the consider it a
        # oblique swipe (but only if any are configured)
        if abx > aby:
            motion = 'left' if x < 0 else 'right'
            if self.has_extended and aby / abx > OBLIQUE_RATIO:
                motion += '_up' if y < 0 else '_down'
        else:
            motion = 'up' if y < 0 else 'down'
            if self.has_extended and abx / aby > OBLIQUE_RATIO:
                motion = ('left_' if x < 0 else 'right_') + motion

        self.action(motion)

@add_gesture_handler
class PINCH(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('in', 'out', 'clockwise', 'anticlockwise')
    extended_text = 'clock'

    def update(self, coords):
        'Update this gesture for a motion'
        self.data[0] += float(coords[4]) - 1.0
        self.data[1] += float(coords[5])

    def end(self):
        'Action this gesture at the end of a motion sequence'
        ratio, angle = self.data

        if self.has_extended and abs(angle) > ROTATE_ANGLE:
            self.action('clockwise' if angle >= 0.0 else 'anticlockwise')
        elif ratio != 0.0:
            self.action('in' if ratio <= 0.0 else 'out')

@add_gesture_handler
class TAP(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('single')
    extended_text = '_'

    def update(self, coords):
        pass

    def end(self):
        self.action('single')


# Table of configuration commands
conf_commands = OrderedDict()

def add_conf_command(func):
    'Add configuration command to command lookup table based on name'
    conf_commands[re.sub('^conf_', '', func.__name__)] = func

@add_conf_command
def conf_gesture(lineargs):
    'Process a single gesture line in conf file'
    fields = lineargs.split(maxsplit=2)

    # Look for configured gesture. Sanity check the line.
    if len(fields) < 3:
        return 'Invalid gesture line - not enough fields'

    gesture, motion, command = fields
    handler = handlers.get(gesture.upper())

    if not handler:
        return 'Gesture "{}" is not supported.\nMust be "{}"'.format(
                gesture, '" or "'.join([h.lower() for h in handlers]))

    # Gesture command can be configured with optional specific finger
    # count so look for that
    fingers, *fcommand = command.split(maxsplit=1)
    if fingers.isdigit() and len(fingers) == 1:
        command = fcommand[0] if fcommand else ''
    else:
        fingers = None

    # Add the configured gesture
    return handler.add(motion.lower(), fingers, command)

@add_conf_command
def conf_device(lineargs):
    'Process a single device line in conf file'
    # Command line overrides configuration file
    if not args.device:
        args.device = lineargs

    return None if args.device else 'No device specified'

def get_conf_line(line):
    'Process a single line in conf file'
    key, *argslist = line.split(maxsplit=1)

    # Old format conf files may have a ":" appended to the key
    key = key.rstrip(':')
    conf_func = conf_commands.get(key)

    if not conf_func:
        return 'Configuration command "{}" is not supported.\n' \
                'Must be "{}"'.format(key, '" or "'.join(conf_commands))

    return conf_func(argslist[0] if argslist else '')

def get_conf(conffile, confname):
    'Read given configuration file and store internal actions etc'
    with conffile.open() as fp:
        for num, line in enumerate(fp, 1):
            line = line.strip()
            if not line or line[0] == '#':
                continue

            errmsg = get_conf_line(line)
            if errmsg:
                sys.exit('Error at line {} in file {}:\n>> {} <<\n{}.'.format(
                    num, confname, line, errmsg))

def unexpanduser(cfile):
    'Return absolute path name, with $HOME replaced by ~'
    relslash = Path(os.path.abspath(str(cfile)))
    try:
        relhome = relslash.relative_to(os.getenv('HOME'))
    except ValueError:
        relhome = None

    return ('~/' + str(relhome)) if relhome else str(relslash)

if args.verbose:
    xsession = os.getenv('XDG_SESSION_DESKTOP') or \
            os.getenv('DESKTOP_SESSION') or 'unknown'
    xtype = os.getenv('XDG_SESSION_TYPE') or 'unknown'
    print('{}: session {}+{} on {}, python {}, libinput {}'.format(PROG,
        xsession, xtype, platform.platform(), platform.python_version(),
        libvers))

# Search for configuration file. Use file given as command line
# argument, else look for file in search dir order.
if args.conffile:
    conffile = Path(args.conffile)
    if not conffile.exists():
        sys.exit('Conf file "{}" does not exist.'.format(conffile))
else:
    for confdir in CONFDIRS:
        conffile = Path(confdir, CONFNAME)
        if conffile.exists():
            break
    else:
        sys.exit('No file {} in {}.'.format(CONFNAME, ' or '.join(
            [unexpanduser(Path(c)) for c in CONFDIRS])))

# Hide any personal user dir/names from diag output
confname = unexpanduser(conffile)

# Read and process the conf file
get_conf(conffile, confname)

# List out available gestures if that is asked for
if args.verbose and not args.raw:
    print('Gestures configured in {}:'.format(confname))
    for h in handlers.values():
        for mpair, cmd in h.motions.items():
            motion, fingers = (mpair, '') if isinstance(mpair, str) else mpair
            print('{} {:10}{:>2} {}'.format(h.name.lower(), motion,
                fingers, cmd))
    if args.device:
        print('device {}'.format(args.device))

# Get touchpad device
if not args.device or args.device.lower() != "all":
    device = get_device(args.device)
    if not device:
        sys.exit('Could not determine touchpad device.')
else:
    device = None

if args.verbose:
    if device:
        print('{}: device {}: {}'.format(PROG, device.get('kernel'),
            device.get('device')))
    else:
        print('{}: monitoring all devices'.format(PROG))

# If just called to list out above environment info then exit now
if args.list:
    sys.exit()

# Make sure only one instance running for current user
user = getpass.getuser()
proglock = open_lock(PROG, user)
if not proglock:
    sys.exit('{} is already running for {}, terminating ..'.format(PROG, user))

# Note your must "sudo gpasswd -a $USER input" then log out/in for
# permission to access the device.
devstr = ' --device {}'.format(device.get('kernel')) if device else ''
command1 = 'stdbuf -oL -- {}{}'.format(cmd_debug_events, devstr)
command2 = 'stdbuf -oL -- evtest {}'.format(device.get('kernel'))

cmd1 = subprocess.Popen(shlex.split(command1), stdout=subprocess.PIPE,
        bufsize=1, universal_newlines=True)
cmd2 = subprocess.Popen(shlex.split(command2), stdout=subprocess.PIPE,
        bufsize=0, universal_newlines=True)

pl1 = select.poll()
pl2 = select.poll()
pl1.register(cmd1.stdout, select.POLLIN)
pl2.register(cmd2.stdout, select.POLLIN)

TAP_DELAY = 0.1
TAP_TIMEOUT = 0.9
GESTURE_TIMEOUT = 1.0

maxtap = 0
prev_maxtap = 2 # Only 3, 4 and 5 finger taps are supported

gesturetrig = 0
taptrig = 0

gesture_active = False
tap_triggered = False
tap_active = False

handler = None

# Sit in a loop forever reading the libinput messages ..
while True:
    now = time.time()

    # Check libinput events
    if pl1.poll(1):
        line = cmd1.stdout.readline()
        # Just output raw messages if in that mode
        if args.raw:
            print(line.strip())
            continue

        # Only interested in gestures
        if 'GESTURE_' in line:
            gesture_active = True

            gesturetrig = time.time()

            # Split received message line into relevant fields
            dev, gevent, tm, other = line.strip().split(maxsplit=3)
            gesture, event = gevent[8:].split('_')
            fingers, *argslist = other.split(maxsplit=1)
            params = argslist[0] if argslist else ''

            # Action each type of event
            if event == 'UPDATE':
                if handler:
                    # Split parameters into list of clean numbers
                    handler.update(re.split(r'[^-.\d]+', params))
            elif event == 'BEGIN':
                handler = handlers.get(gesture)
                if handler:
                    handler.begin(fingers)
                else:
                    print('Unknown gesture received: {}.'.format(gesture),
                            file=sys.stderr)
            elif event == 'END':
                # Ignore gesture if final action is cancelled
                if handler:
                    if params != 'cancelled':
                        handler.end()
                    handler = None
            else:
                print('Unknown gesture + event received: {} + {}.'.format(gesture,
                    event), file=sys.stderr)

    # Check evtest events
    if pl2.poll(1):
        line2 = cmd2.stdout.readline()
        if 'EV_KEY' in line2 and not gesture_active:
            # To only register taps when one of the following three events occurs:
            listed_tap = False 
            if 'BTN_TOOL_TRIPLETAP' in line2 and maxtap < 3:
                maxtap = 3
                listed_tap = True
            elif 'BTN_TOOL_QUADTAP' in line2 and maxtap < 4:
                maxtap = 4
                listed_tap = True
            elif 'BTN_TOOL_QUINTTAP' in line2 and maxtap < 5:
                maxtap = 5
                listed_tap = True

            if maxtap > prev_maxtap and not tap_active and listed_tap:
                taptrig = time.time()
                tap_triggered = True
                tap_fingers = str(maxtap)
                prev_maxtap = maxtap
                maxtap = 0
        elif gesture_active:
            tap_triggered = False

    if now - gesturetrig > GESTURE_TIMEOUT and gesture_active:
        maxtap = 0
        prev_maxtap = 2
        gesture_active = False
        
    if now - taptrig > TAP_TIMEOUT and tap_active:
        maxtap = 0
        prev_maxtap = 2
        tap_active = False

    if now - taptrig > TAP_DELAY and tap_triggered and not gesture_active:
        tap_active = True
        tap_triggered = False
        maxtap = 0
        handler = handlers.get('TAP')
        if handler:
            handler.begin(tap_fingers)
            handler.end()
        
